<?xml version="1.0" encoding="UTF-8"?>
<beans
        xmlns="http://www.springframework.org/schema/beans"
        xmlns:aop="http://www.springframework.org/schema/aop"
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

    <!--与 @EnableAspectJAutoProxy 功能一，一个是基于注解的，一个是基于XML的-->
    <aop:aspectj-autoproxy/>


    <bean id="aspectXmlConfig" class="com.zq.aop.features.aspect.AspectXmlConfig"></bean>

    <!--基于xml使用pointcut例子-->
    <aop:config>
        <aop:aspect id="AspectXmlConfig" ref="aspectXmlConfig">  <!--声明切面 id 需要是一个类名称，所以首字母大写-->
            <aop:pointcut id="anyPublicMethod" expression="execution(public * *(..))"/>
            <aop:around method="aroundAnyPublicMethod" pointcut-ref="anyPublicMethod"/>
            <aop:before method="beforeAnyPublicMethod" pointcut-ref="anyPublicMethod"/>
            <aop:before method="beforeAnyPublicMethod" pointcut="execution(public * *(..))"/>
            <aop:after method="afterAnyPublicMethod" pointcut-ref="anyPublicMethod"/>
            <aop:after-returning method="afterReturningAnyPublicMethod" pointcut-ref="anyPublicMethod"/>
            <aop:after-throwing method="afterThrowingAnyPublicMethod" pointcut-ref="anyPublicMethod"/>
        </aop:aspect>
    </aop:config>

    <!-- 定义一个 echoService Bean，要被创建代理的 Bean-->
    <bean id="echoService" class="com.zq.aop.overview.proxy.DefaultEchoService">
        <!--视频：89丨作用域代理Schema-based实现 - aopscoped-proxy.mp4-->
        <!--CGLIB 字节码提升的方式，类同于 @Configuration-->
        <!--<aop:scoped-proxy proxy-target-class="true"/>-->
    </bean>

    <bean id="echoServiceMethodInterceptor" class="com.zq.aop.features.interceptor.EchoServiceMethodInterceptor"/>

    <bean id="targetSource" class="org.springframework.aop.target.HotSwappableTargetSource">
        <constructor-arg ref="echoService"/>
    </bean>
    <!--这种方式不是自动创建的代理对象，是通过 ProxyFactoryBean 创建了一个 echoService 的代理对象-->
    <bean id="echoServiceProxyFactoryBean" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="targetName" value="echoService"/> <!--echoService 这个 bean 就会被创建代理-->
        <property name="interceptorNames">
            <value>echoServiceMethodInterceptor</value>
        </property>
        <property name="targetSource" ref="targetSource"/>
    </bean>

</beans>